services:
  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: mt5_node_exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/rootfs
    ports:
      - "9100:9100"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "128m"
    mem_limit: 128m

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: mt5_cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256m"
    mem_limit: 256m
  db:
    image: timescale/timescaledb:2.14.2-pg16
    container_name: mt5_db
    restart: unless-stopped
    env_file: .env
    environment:
      DB_HOST: "db"
      DB_PORT: "5432"
    expose:
      - "5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres.conf.d/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trader} -d ${POSTGRES_DB:-mt5_trading} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"
    # mem_limit for older compose versions (optional)
    mem_limit: 2g
    networks:
      default:
        aliases: [db, mt5_db]

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: mt5-api
    container_name: mt5_api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://trader:trader123@db:5432/mt5_trading"
      PORT: ${API_PORT_INTERNAL:-8001}
      UVICORN_WORKERS: ${UVICORN_WORKERS:-1}
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_USER: "trader"
      DB_PASS: "trader123"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT:-8001}:8001"
    command: >
      uvicorn app.main:app
      --host 0.0.0.0
      --port 8001
      --access-log
    
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8001/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"
    mem_limit: 2g
    volumes:
      - ./scripts:/app/scripts:rw
      # - ./dados_historicos.csv:/app/scripts/dados_historicos.csv:ro  # Already included in scripts mount
      


  pgadmin:
    image: dpage/pgadmin4:8.12
    container_name: mt5_pgadmin
    restart: unless-stopped
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
    depends_on:
      - db
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    # If you do not use pgAdmin remotely, remove the `ports` mapping or bind it to localhost only
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m


  ml-trainer:
    build:
      context: ./ml
    image: ml-trainer
    container_name: mt5_ml_trainer
    restart: unless-stopped
    environment:
      DB_HOST: "db"
      DB_NAME: "${POSTGRES_DB:-mt5_trading}"
      DB_USER: "${POSTGRES_USER:-trader}"
      DB_PASS: "${POSTGRES_PASSWORD:-trader123}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./ml/data:/app/data:rw
      - models_mt5:/app/models:rw
    command: ["python", "prepare_dataset.py"]
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/data/dataset.csv || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"
    mem_limit: 2g



# --- Observabilidade ---
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: mt5_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m

  grafana:
    image: grafana/grafana-oss:11.0.0
    container_name: mt5_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
      - db
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m

volumes:
  db_data:
  models_mt5:
    external: true
  prometheus_data:
  grafana_data:
