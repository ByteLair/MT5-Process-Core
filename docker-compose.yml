services:
  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: mt5_node_exporter
    restart: unless-stopped
    # run in default docker network; Prometheus scrapes at node-exporter:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/rootfs
      - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/containers/storage/.+)($|/)
      - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
    # No explicit ports needed with host networking
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "128m"
    mem_limit: 128m

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.49.1
  #   container_name: mt5_cadvisor
  #   restart: unless-stopped
  #   privileged: true
  #   devices:
  #     - /dev/kmsg
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   ports:
  #     - "8080:8080"
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "50m"
  #       max-file: "5"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "0.5"
  #         memory: "256m"
  #   mem_limit: 256m
  db:
    image: timescale/timescaledb:2.14.2-pg16
    container_name: mt5_db
    restart: unless-stopped
    env_file: .env
    environment:
      DB_HOST: "db"
      DB_PORT: "5432"
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres.conf.d/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trader} -d ${POSTGRES_DB:-mt5_trading} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"
    # mem_limit for older compose versions (optional)
    mem_limit: 2g
    networks:
      default:
        aliases: [db, mt5_db]

  pgbouncer:
    build:
      context: ./pgbouncer
      dockerfile: Dockerfile
    container_name: mt5_pgbouncer
    restart: unless-stopped
    ports:
      - "6432:5432"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${POSTGRES_PASSWORD} psql -h 127.0.0.1 -p 5432 -U ${POSTGRES_USER:-trader} -d pgbouncer -c 'SHOW POOLS;' >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256m"
    mem_limit: 256m
    networks:
      - default

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: mt5-api
    container_name: mt5_api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://trader:trader123@db:5432/mt5_trading"
      PORT: ${API_PORT_INTERNAL:-8001}
      UVICORN_WORKERS: ${UVICORN_WORKERS:-1}
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_USER: "trader"
      DB_PASS: "trader123"
      USE_PGBOUNCER: "false"
      APP_NAME: "mt5-trading-api"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "18003:8001"
    command: >
      uvicorn app.main:app
      --host 0.0.0.0
      --port 8001
      --access-log

    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8001/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"
    mem_limit: 2g
    volumes:
      - ./scripts:/app/scripts:rw
      # - ./dados_historicos.csv:/app/scripts/dados_historicos.csv:ro  # Already included in scripts mount

  tick-aggregator:
    profiles: ["ticks"]
    build:
      context: ./api
      dockerfile: Dockerfile
    image: mt5-api
    container_name: mt5_tick_aggregator
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://trader:trader123@db:5432/mt5_trading"
      TICK_AGG_INTERVAL: ${TICK_AGG_INTERVAL:-5}
      DB_HOST: "db"
      DB_PORT: "5432"
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "run_tick_aggregator.py"]
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f run_tick_aggregator || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
    mem_limit: 512m

  indicators-worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: mt5-api
    container_name: mt5_indicators_worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://trader:trader123@db:5432/mt5_trading"
      INDICATORS_INTERVAL: ${INDICATORS_INTERVAL:-60}
      SYMBOLS: ${SYMBOLS:-EURUSD,GBPUSD,USDJPY}
      DB_HOST: "db"
      DB_PORT: "5432"
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "run_indicators_worker.py"]
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f run_indicators_worker || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1g"
    mem_limit: 1g


  ea-pusher:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: mt5-api
    container_name: mt5_ea_pusher
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+psycopg://trader:trader123@db:5432/mt5_trading"
      EA_SERVER_IP: ${EA_SERVER_IP:-192.168.15.18}
      EA_SERVER_PORT: ${EA_SERVER_PORT:-8080}
      EA_API_KEY: ${EA_API_KEY:-mt5_trading_secure_key_2025_prod}
      EA_PUSH_INTERVAL: ${EA_PUSH_INTERVAL:-30}
      EA_PUSH_ENABLED: ${EA_PUSH_ENABLED:-true}
      EA_REQUEST_TIMEOUT: ${EA_REQUEST_TIMEOUT:-10}
      DB_HOST: "db"
      DB_PORT: "5432"
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "run_ea_pusher.py"]
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f run_ea_pusher || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
    mem_limit: 512m


  pgadmin:
    image: dpage/pgadmin4:8.12
    container_name: mt5_pgadmin
    restart: unless-stopped
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
    depends_on:
      - db
    ports:
      - "${PGADMIN_PORT:-15050}:80"
    # If you do not use pgAdmin remotely, remove the `ports` mapping or bind it to localhost only
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m


  ml-trainer:
    build:
      context: ./ml
    image: ml-trainer
    container_name: mt5_ml_trainer
    restart: unless-stopped
    environment:
      DB_HOST: "db"
      DB_NAME: "${POSTGRES_DB:-mt5_trading}"
      DB_USER: "${POSTGRES_USER:-trader}"
      DB_PASS: "${POSTGRES_PASSWORD:-trader123}"
      # CPU threading - use all 28 cores
      OMP_NUM_THREADS: "28"
      OPENBLAS_NUM_THREADS: "28"
      MKL_NUM_THREADS: "28"
      NUMEXPR_NUM_THREADS: "28"
      PYTORCH_NUM_THREADS: "28"
      OMP_PROC_BIND: "true"
      OMP_PLACES: "cores"
      KMP_AFFINITY: "granularity=fine,compact,1,0"
      MKL_DYNAMIC: "FALSE"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./ml/data:/app/data:rw
      - models_mt5:/app/models:rw
    command: ["python", "prepare_dataset.py"]
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/data/dataset.csv || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    # Local compose resource controls (use full server)
    cpus: 28
    cpuset: "0-27"
    mem_limit: 32g
    deploy:
      resources:
        limits:
          cpus: "28"
          memory: "32g"



# --- Observabilidade ---
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: mt5_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "19090:9090"
    depends_on:
      - api
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m

  loki:
    image: grafana/loki:2.9.8
    container_name: mt5_loki
    restart: unless-stopped
    ports:
      - "13100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m

  promtail:
    image: grafana/promtail:2.9.8
    container_name: mt5_promtail
    restart: unless-stopped
    volumes:
      - ./loki/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
        # - /var/lib/docker/containers:/var/lib/docker/containers:ro  # read-only filesystem
      - ./logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256m"
    mem_limit: 256m

  jaeger:
    image: jaegertracing/all-in-one:1.56
    container_name: mt5_jaeger
    restart: unless-stopped
    user: root
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    ports:
      - "25775:5775/udp"   # Zipkin compatible endpoint
      - "26831:6831/udp"   # Jaeger Thrift Compact
      - "26832:6832/udp"   # Jaeger Thrift Binary
      - "25778:5778"       # Config endpoint
      - "26686:16686"      # UI
      - "24268:14268"      # HTTP collector
      - "24250:14250"      # gRPC collector
      - "29411:9411"       # Zipkin compatible endpoint
      - "24317:4317"       # OTLP gRPC
      - "24318:4318"       # OTLP HTTP
    volumes:
      - jaeger_data:/badger
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m

  grafana:
    image: grafana/grafana-oss:11.0.0
    container_name: mt5_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    depends_on:
      - prometheus
      - loki
      - jaeger
      - db
    ports:
      - "13000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512m"
    mem_limit: 512m

volumes:
  db_data:
  models_mt5:
    external: true
  prometheus_data:
  grafana_data:
  loki_data:
  jaeger_data:
