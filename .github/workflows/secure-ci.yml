name: Secure & Efficient CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  precommit:
    name: Pre-commit & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install pre-commit ruff black bandit pip-audit detect-secrets yamllint pytest pytest-cov markdownlint-cli

      - name: Run pre-commit
        run: pre-commit run --all-files

      - name: Run Ruff (lint)
        run: ruff .

      - name: Run Black (format)
        run: black --check .

      - name: Run Bandit (security)
        run: bandit -r .

      - name: Run pip-audit (dependency security)
        run: pip-audit

      - name: Run detect-secrets
        run: detect-secrets scan --all-files

      - name: Run yamllint
        run: yamllint .

      - name: Run markdownlint
        run: markdownlint **/*.md

      - name: Run tests (pytest)
        run: pytest --cov=.

      - name: Build Docker image (if Dockerfile exists)
        run: |
          if [ -f Dockerfile ]; then
            docker build -t mt5-trading-db:ci .
          else
            echo "No Dockerfile found, skipping build."
          fi

      - name: Notify on failure (example)
        if: failure()
        run: |
          echo "CI failed!" # Integrate with Slack/email as needed

# Documentation (README-secure-ci.md)
# ENGLISH
# Secure & Efficient CI Workflow
# This workflow runs pre-commit, lint, security, dependency, YAML/Markdown checks, unit tests, and Docker build on every push and pull request. It blocks merges/deploys if any step fails, ensuring code quality and security.
# Steps:
# - Pre-commit: style, type, and secret checks
# - Ruff/Black: Python lint and formatting
# - Bandit: Python security analysis
# - pip-audit: dependency vulnerability scan
# - detect-secrets: secret exposure scan
# - yamllint: YAML config validation
# - markdownlint: Markdown documentation style
# - pytest: unit tests and coverage
# - Docker build: deployment validation
# - Notification: alerts on failure
#
# PORTUGUÊS
# CI Seguro e Eficiente
# Este workflow executa pre-commit, lint, segurança, dependências, validação de YAML/Markdown, testes e build Docker em todo push e pull request. Bloqueia merges/deploys se qualquer etapa falhar, garantindo qualidade e segurança do código.
# Etapas:
# - Pre-commit: estilo, tipos e checagem de segredos
# - Ruff/Black: lint e formatação Python
# - Bandit: análise de segurança Python
# - pip-audit: verificação de vulnerabilidades em dependências
# - detect-secrets: busca por segredos expostos
# - yamllint: validação de configs YAML
# - markdownlint: estilo da documentação Markdown
# - pytest: testes unitários e cobertura
# - Build Docker: validação de deploy
# - Notificação: alerta em caso de falha
