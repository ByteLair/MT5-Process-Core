{{- /* pragma: allowlist secret */ -}}
{{- if .Values.api.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
  namespace: {{ .Values.global.namespace }}
  labels:
  app: mt5-api
  {{- include "mt5-trading.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      app: mt5-api
  template:
    metadata:
      labels:
        app: mt5-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/prometheus"
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z postgres-service {{ .Values.postgres.service.port }}; do echo waiting for postgres; sleep 2; done;']
      containers:
        - name: api
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.api.service.targetPort }}
              name: http
          env:
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.postgres.auth.username }}:{{ .Values.postgres.auth.password }}@postgres-service:{{ .Values.postgres.service.port }}/{{ .Values.postgres.auth.database }}"
            - name: API_KEY
              value: {{ .Values.api.apiKey }}
            - name: LOG_LEVEL
              value: {{ .Values.config.logLevel }}
        - name: WORKERS
          value: {{ .Values.config.workers | quote }}
        resources:
          {{- toYaml .Values.api.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.api.service.targetPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.api.service.targetPort }}
          initialDelaySeconds: 10
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: mt5-api-service
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "mt5-trading.labels" . | nindent 4 }}
spec:
  type: {{ .Values.api.service.type }}
  ports:
  - port: {{ .Values.api.service.port }}
    targetPort: {{ .Values.api.service.targetPort }}
    protocol: TCP
    name: http
  selector:
    app: mt5-api

---
{{- if .Values.api.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-api-hpa
  namespace: {{ .Values.global.namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}-api
  minReplicas: {{ .Values.api.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.api.autoscaling.maxReplicas }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.api.autoscaling.targetCPUUtilizationPercentage }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.api.autoscaling.targetMemoryUtilizationPercentage }}
{{- end }}

---
{{- if .Values.api.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-api-ingress
  namespace: {{ .Values.global.namespace }}
  annotations:
    kubernetes.io/ingress.class: {{ .Values.api.ingress.className }}
spec:
  {{- if .Values.api.ingress.tls.enabled }}
  tls:
  - hosts:
    - {{ .Values.api.ingress.host }}
    secretName: {{ .Values.api.ingress.tls.secretName }}
  {{- end }}
  rules:
  - host: {{ .Values.api.ingress.host }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mt5-api-service
            port:
              number: {{ .Values.api.service.port }}
{{- end }}
{{- end }}
