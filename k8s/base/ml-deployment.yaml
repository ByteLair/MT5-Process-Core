---
# ML Trainer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-trainer
  namespace: mt5-trading
  labels:
    app: ml-trainer
    component: ml
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ml-trainer
  template:
    metadata:
      labels:
        app: ml-trainer
        component: ml
    spec:
      initContainers:
      - name: wait-for-db
        image: busybox:1.36
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
      - name: trainer
        image: mt5-trading-ml:latest
        imagePullPolicy: IfNotPresent
        command: ["python", "train_worker.py"]
        envFrom:
        - configMapRef:
            name: mt5-trading-config
        - secretRef:
            name: mt5-trading-secrets
        env:
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: ml-models
          mountPath: /models
      volumes:
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc

---
# ML Scheduler CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ml-training-job
  namespace: mt5-trading
  labels:
    app: ml-scheduler
    component: ml
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            app: ml-training-job
            component: ml
        spec:
          restartPolicy: OnFailure
          initContainers:
          - name: wait-for-db
            image: busybox:1.36
            command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for postgres; sleep 2; done;']
          containers:
          - name: train-models
            image: mt5-trading-ml:latest
            imagePullPolicy: IfNotPresent
            command:
            - /bin/bash
            - -c
            - |
              echo "Starting ML training pipeline..."
              python prepare_dataset.py && \
              python train_model.py && \
              python train_informer.py && \
              echo "Training completed successfully!"
            envFrom:
            - configMapRef:
                name: mt5-trading-config
            - secretRef:
                name: mt5-trading-secrets
            env:
            - name: DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
            resources:
              requests:
                memory: "2Gi"
                cpu: "1000m"
              limits:
                memory: "8Gi"
                cpu: "4000m"
            volumeMounts:
            - name: ml-models
              mountPath: /models
          volumes:
          - name: ml-models
            persistentVolumeClaim:
              claimName: ml-models-pvc
